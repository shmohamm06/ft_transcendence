ft_transcendence: Project Report

Team Members:
- Shahria Shadman Mohammed (Backend)
- Fahad Maqdasi (Backend)
- Wahab Yaseen (Frontend)
- Aleksei Bobylev (Frontend)
- Temirlan Zhakypov (Game)

Date: [Insert Date]


Section 1: Abstract
This report presents the design, development, and delivery of ft_transcendence, a modern web-based gaming platform. Developed by a five-member team, the project integrates real-time multiplayer Pong, a second game (Tic-Tac-Toe), user authentication, and user management. The report details the projectâ€™s objectives, requirements, design decisions, implementation, testing, and evolution, providing a comprehensive overview of the software engineering process and the collaborative efforts of the team.


Table of Contents
1. Abstract
2. Table of Contents
3. List of Figures
4. List of Tables
5. List of Abbreviations
6. Introduction
7. Software Development Life Cycle (SDLC)
8. Requirement Analysis
9. Design
10. Implementation
11. Testing
12. Evolution
13. Gantt Chart
14. Risk Register and Risk Matrix
15. Functional Requirements
16. Technical Requirements
17. Wireframes
18. Flowcharts
19. Conclusion
20. Appendices


List of Figures
Figure 1. Example Gantt Chart
Figure 2. Example Risk Register
Figure 3. Risk Matrix
Figure 4. Wireframe of Main Screens
Figure 5. Flowchart of User Registration
Figure 6. Flowchart of Gameplay

List of Tables
Table 1. Risk Register
Table 2. Risk Matrix
Table 3. List of Abbreviations
Table 4. Project Task Timeline

List of Abbreviations
| Abbreviation | Full Form |
|--------------|-------------------------------|
| SDLC         | Software Development Life Cycle|
| UI           | User Interface                |
| UX           | User Experience               |
| API          | Application Programming Interface|
| JWT          | JSON Web Token                |
| 2FA          | Two-Factor Authentication     |
| SPA          | Single Page Application       |
| DBMS         | Database Management System    |
| ORM          | Object-Relational Mapping     |
| HTTPS        | Hypertext Transfer Protocol Secure|
| WAF          | Web Application Firewall      |
| CRUD         | Create, Read, Update, Delete  |
| HCI          | Human Computer Interaction    |
| TDD          | Test-Driven Development       |


Section 2: Introduction
ft_transcendence is a web-based reimagining of the classic Pong game, enhanced with modern features such as real-time multiplayer, secure authentication, and user management. The project was developed as a collaborative effort by a five-member team, each contributing their expertise in backend, frontend, or game development. The primary objective was to deliver a robust, scalable, and engaging gaming platform that demonstrates the application of software engineering principles in a real-world context. This report outlines the journey from initial concept to final delivery, detailing the processes, challenges, and solutions encountered along the way.


Section 2.1: Modules Implemented
To achieve 100% project completion, our team focused on the following major and minor modules, as required by the project subject:

Web:
- Major: Used Fastify (Node.js) to build the backend as a robust, scalable API service.
- Minor: Used React and TypeScript to build a modern, responsive frontend.
- Minor: Integrated SQLite as the backend database for persistent storage.

User Management:
- Major: Implemented standard user management, including registration, authentication (JWT), and user tracking across tournaments and games.

Gameplay and User Experience:
- Major: Developed multiplayer support, allowing more than two players in the same game session.
- Major: Added a second game (Tic-Tac-Toe) with user history and basic matchmaking.
- Minor: Provided game customization options (e.g., paddle/ball speed, color themes).

AI-Algo:
- Major: Introduced an AI opponent for single-player Pong and Tic-Tac-Toe.
- Minor: Built user and game stats dashboards for performance tracking.

DevOps:
- Major: Designed the backend as microservices, with separate services for authentication and game logic, orchestrated via Docker Compose.

Accessibility:
- Minor: Expanded browser compatibility, ensuring the platform works on all major browsers.

Section 3: Software Development Life Cycle (SDLC)
Our team adopted an Agile SDLC, organizing the project into iterative sprints with regular stand-ups and continuous integration. The phases included planning, requirement analysis, design, implementation, testing, and deployment. Each phase was documented and reviewed to ensure alignment with project goals and requirements. Collaboration was facilitated through version control, code reviews, and issue tracking, ensuring transparency and accountability throughout the development process.

3.1 Project Initiation and Planning
The project began with a kickoff meeting to define objectives, deliverables, and team roles. Each member was assigned responsibilities based on their expertise: Shahria Shadman Mohammed and Fahad Maqdasi (Backend), Wahab Yaseen and Aleksei Bobylev (Frontend), and Temirlan Zhakypov (Game). We established communication channels, selected tools (GitHub, Slack, Trello), and set up a shared repository.

3.2 Requirement Analysis
We conducted requirement gathering sessions, referencing the official project requirements and brainstorming additional features. Functional and technical requirements were documented and prioritized. Use cases and user stories were developed to guide implementation.

3.3 Design
The team created wireframes, flowcharts, and an initial database schema. Architectural decisions were made collaboratively, with a focus on modularity, scalability, and security. The system was divided into backend, frontend, and game engine components, each with clear interfaces and responsibilities.

3.4 Implementation (Sprints)
Development was organized into sprints, each focused on a specific set of features:
- Sprint 1: User registration and authentication (JWT, password hashing)
- Sprint 2: Multiplayer Pong gameplay (WebSocket integration)
- Sprint 3: Game customization options and stats dashboards
- Sprint 4: Second game (Tic-Tac-Toe) with basic matchmaking
- Sprint 5: AI opponent for both games
- Sprint 6: Microservices and Dockerization
- Sprint 7: Browser compatibility and UI polish
Each sprint included daily stand-ups, code reviews, and testing.

3.5 Testing and Quality Assurance
Testing was integrated throughout development. Unit, integration, and end-to-end tests were written for backend and frontend components. Manual testing was performed for gameplay and UI/UX. Bugs were tracked and resolved using GitHub Issues. Security testing included validation against SQL injection, XSS, and authentication bypass.

3.6 Deployment and Evolution
The application was containerized using Docker and deployed to a cloud environment. CI/CD pipelines automated testing and deployment. The team conducted retrospectives after each sprint to identify improvements and adapt to changing requirements. Future enhancements were documented for post-project development.

Section 4: Requirement Analysis
4.1 Functional Requirements
- User registration, login, and authentication (JWT)
- User management across tournaments and games
- Multiplayer Pong (more than 2 players per game)
- Additional game: Tic-Tac-Toe with user history and basic matchmaking
- Game customization options (e.g., paddle/ball speed, color themes)
- AI opponent for both games
- User and game stats dashboards
- Responsive frontend for all major browsers

4.2 Technical Requirements
- Backend: Fastify (Node.js), microservices architecture
- Frontend: React, TypeScript
- Database: SQLite
- Containerization: Docker, Docker Compose
- Version control: Git, GitHub

4.3 Non-Functional Requirements
- Scalability: Support for concurrent users and games
- Performance: Low-latency gameplay and fast API responses
- Reliability: Automated backups and error recovery
- Usability: Intuitive UI/UX, accessibility features
- Compliance: GDPR and data privacy best practices

Section 5: Design
5.1 System Architecture
The application follows a client-server architecture, with a clear separation between frontend, backend, and game engine. The backend exposes REST and WebSocket APIs for data and real-time events. The frontend is a Single Page Application (SPA) built with React and TypeScript. The game engine runs in the browser, using Canvas/WebGL for rendering and custom logic for physics and input handling.

[Insert System Architecture Diagram Here]

**UNFINISHED: SYSTEM ARCHITECTURE DIAGRAM YET TO COMPLETE. WAHAB HELP ME OUT WITH THIS PLS**

5.2 Database Design
The PostgreSQL database schema includes tables for users, games, chat messages, friends, leaderboards, and localization data. Relationships are enforced with foreign keys and indexes for performance. Sensitive data (passwords, tokens) is encrypted at rest.

[Insert ERD Diagram Here]

**UNFINISHED: ERD DIAGRAM YET TO COMPLETE. WAHAB HELP ME OUT WITH THIS PLS**

5.3 User Interface and UX
Wireframes were created for all major screens: landing page, login/register, home, game, chat, profile, settings, and leaderboards. The UI uses a responsive grid layout, accessible color schemes, and clear navigation. User flows were mapped for registration, matchmaking, gameplay, and account management.

[Insert Wireframes Here]

**WAHAB HELP ME OUT WITH THIS PLS: WIREFRAMES SECTION UNFINISHED**

5.4 Security Design
Security is integrated at every layer: password hashing (bcrypt), JWT for session management, HTTPS for all traffic, input validation on both client and server, and 2FA for sensitive actions. Rate limiting and logging are implemented to detect and prevent abuse.

5.5 API and Integration
RESTful APIs are used for user management, matchmaking, and leaderboards. WebSocket APIs handle real-time gameplay and chat. The frontend consumes these APIs via async actions and manages state with Redux.

5.6 Deployment Architecture
The application is containerized with Docker, using Docker Compose to orchestrate backend, frontend, and database services. Environment variables and secrets are managed securely. CI/CD pipelines automate build, test, and deployment steps.

[Insert Deployment Diagram Here]

5.7 Documentation and Prototyping
Comprehensive documentation was maintained for APIs, database schema, and deployment. Prototypes were built for key features (gameplay, chat) to validate design decisions before full implementation.

Section 6: Implementation
Implementation was structured around Agile sprints, each targeting a specific set of features and technical milestones. Below is a detailed breakdown of the major sprints and their deliverables:

6.1 Sprint 1: User Registration and Authentication
- Designed and implemented secure user registration and login using JWT and bcrypt password hashing.
- Developed frontend forms with real-time validation for username, email, and password strength.
- Implemented backend validation and error handling for registration and login endpoints.
- Challenges: Ensuring robust validation and secure storage of credentials; solution involved layered validation and use of industry-standard hashing algorithms.

6.2 Sprint 2: Multiplayer Pong Gameplay
- Developed the core Pong game engine using HTML5 Canvas and JavaScript, with a custom game loop for smooth rendering.
- Integrated WebSocket communication for real-time multiplayer matches (more than 2 players per game).
- Implemented game state synchronization between clients and server.
- Added support for keyboard controls, responsive resizing, and pause/resume functionality.
- Challenges: Achieving low-latency synchronization; solution involved optimizing WebSocket message frequency and delta updates.

6.3 Sprint 3: Game Customization and Stats Dashboards
- Added game customization options (e.g., paddle/ball speed, color themes).
- Built user and game stats dashboards for performance tracking.
- Challenges: Ensuring customization options did not break gameplay balance; solution involved user testing and iterative refinement.

6.4 Sprint 4: Second Game (Tic-Tac-Toe) with Basic Matchmaking
- Developed a second game, Tic-Tac-Toe, with basic matchmaking (pairing users for games).
- Implemented user history for Tic-Tac-Toe matches.
- Challenges: Ensuring smooth transitions between games and accurate history tracking.

6.5 Sprint 5: AI Opponent for Both Games
- Introduced an AI opponent for single-player Pong and Tic-Tac-Toe.
- Designed AI logic to provide a challenging but fair experience.
- Challenges: Balancing AI difficulty and performance.

6.6 Sprint 6: Microservices and Dockerization
- Designed the backend as microservices, with separate services for authentication and game logic.
- Containerized backend, frontend, and database services using Docker and Docker Compose.
- Set up CI/CD pipelines with GitHub Actions for automated testing and deployment.
- Challenges: Ensuring consistent environments and smooth deployments; solution involved extensive testing and rollback strategies.

6.7 Sprint 7: Browser Compatibility and UI Polish
- Ensured the platform works on all major browsers.
- Refined UI components for responsiveness and accessibility.
- Challenges: Addressing browser-specific issues and ensuring a consistent user experience.

[Insert code snippets, architecture diagrams, and workflow charts as needed.]

**UNFINISHED: CODE SNIPPETS, ARCHITECTURE DIAGRAMS, WORKFLOW CHARTS YET TO COMPLETE. WAHAB HELP ME OUT WITH THIS PLS**

Section 7: Testing
Testing was a continuous process, integrated into every sprint and feature delivery. Our approach included:

7.1 Test-Driven Development (TDD)
- Adopted TDD for backend logic, writing tests before implementing features.
- Used Jest and Mocha for backend unit and integration tests.
- Ensured high test coverage for critical modules (authentication, game logic, AI).

7.2 Frontend and End-to-End Testing
- Used Cypress and Selenium for end-to-end testing of user flows (registration, login, gameplay, game customization).
- Manual testing for UI/UX, responsiveness, and cross-browser compatibility (Chrome, Firefox, Edge, Safari).
- Simulated edge cases and error conditions to ensure robust handling.

7.3 Security and Penetration Testing
- Conducted security testing for SQL injection, XSS, and authentication bypass.
- Used tools like Burp Suite and custom scripts to probe for vulnerabilities.
- Implemented logging and alerting for suspicious activity.

7.4 Regression and User Acceptance Testing
- Ran regression tests after each major update to ensure no features were broken.
- Collaborated with peers for user acceptance testing (UAT), gathering feedback and iterating on UI/UX.

7.5 Continuous Integration and Quality Assurance
- Automated test runs in CI/CD pipelines, blocking deployments on test failures.
- Maintained detailed test reports and tracked issues in GitHub.

[Insert test case examples, screenshots, and test coverage reports as needed.]

**UNFINISHED: TEST CASE EXAMPLES, SCREENSHOTS, TEST COVERAGE REPORTS YET TO COMPLETE. WAHAB HELP ME OUT WITH THIS PLS**

Section 8: Evolution
The project evolved through multiple iterations, adapting to feedback, new requirements, and technical challenges. Key aspects of our evolution included:

8.1 Adapting to Change
- Incorporated new features (e.g., game customization, stats dashboards) based on user and stakeholder feedback.
- Refactored codebase for maintainability and scalability as the project grew.

8.2 Overcoming Technical Challenges
- Addressed synchronization issues in real-time gameplay by optimizing WebSocket handling.
- Improved security posture in response to penetration testing results.
- Enhanced deployment reliability with automated rollbacks and monitoring.

8.3 Team Growth and Collaboration
- Improved workflow through regular retrospectives and process adjustments.
- Fostered knowledge sharing and documentation to onboard new contributors.

8.4 Future Directions
- Plans for mobile app support, additional game modes, and advanced analytics.
- Ongoing commitment to open-source contributions and community engagement.

[Insert timeline diagrams, evolution charts, and future roadmap sketches as needed.]

Section 9: Gantt Chart
The following Gantt chart outlines the timeline, milestones, and responsibilities for each phase of the ft_transcendence project. Each task is assigned to one or more team members, with dependencies and estimated durations clearly indicated. Use a tool like Excel, Google Sheets, or an online Gantt chart generator to visualize this data.

| Task Name                        | Start Date  | End Date    | Assignees                        | Dependencies         |
|----------------------------------|-------------|-------------|----------------------------------|----------------------|
| Project Kickoff & Planning       | 2024-02-01  | 2024-02-03  | All                              | -                    |
| Requirements Gathering           | 2024-02-03  | 2024-02-06  | All                              | Project Kickoff      |
| System Architecture & Design     | 2024-02-06  | 2024-02-10  | All                              | Requirements         |
| Backend Auth Service             | 2024-02-10  | 2024-02-20  | Shahria, Fahad                   | Design               |
| Game Engine (Core Logic)         | 2024-02-10  | 2024-02-20  | Temirlan                         | Design               |
| Frontend UI/UX                   | 2024-02-10  | 2024-02-20  | Wahab, Aleksei                   | Design               |
| WebSocket Integration            | 2024-02-15  | 2024-02-22  | All                              | Backend, Game Engine |
| Game Customization & Stats       | 2024-02-20  | 2024-02-25  | Backend, Frontend                | Auth, UI/UX          |
| Tic-Tac-Toe & Matchmaking        | 2024-02-22  | 2024-02-28  | All                              | Game Engine          |
| AI Opponent                      | 2024-02-25  | 2024-03-01  | Temirlan, Backend                | Pong, Tic-Tac-Toe    |
| Testing & QA                     | 2024-03-01  | 2024-03-07  | All                              | All Features         |
| Deployment & Documentation       | 2024-03-07  | 2024-03-10  | All                              | Testing              |

[Insert your actual Gantt chart visualization here.]

**UNFINISHED: GANTT CHART VISUALIZATION YET TO COMPLETE. WAHAB HELP ME OUT WITH THIS PLS**

Section 10: Risk Register and Risk Matrix
A comprehensive risk register was maintained throughout the project to identify, assess, and mitigate potential risks. The following table summarizes the most significant risks, their likelihood, impact, owners, and mitigation strategies.

| Risk Description                | Likelihood (1-5) | Impact (1-5) | Risk Score | Owner(s)         | Mitigation Strategy                                  |
|---------------------------------|------------------|--------------|------------|------------------|------------------------------------------------------|
| Server downtime                 | 2                | 5            | 10         | Backend          | Use cloud hosting, regular backups, monitoring       |
| WebSocket desync/latency        | 3                | 4            | 12         | Game, Backend    | Optimize message handling, monitor latency           |
| Authentication bypass           | 2                | 5            | 10         | Backend          | Penetration testing, code reviews                    |
| Data breach (user info)         | 1                | 5            | 5          | Backend          | Encrypt sensitive data, HTTPS, access controls       |
| Cheating/game exploits          | 3                | 3            | 9          | Game, Backend    | Server-side validation, anti-cheat logic             |
| Feature delivery delays         | 3                | 3            | 9          | All              | Agile sprints, regular stand-ups, task tracking      |
| Team member unavailability      | 2                | 4            | 8          | All              | Knowledge sharing, documentation, flexible planning  |
| Data loss/corruption            | 1                | 5            | 5          | Backend          | Automated backups, transaction logs                  |
| Security vulnerabilities        | 2                | 5            | 10         | All              | Regular updates, dependency checks, code reviews     |

Risk Matrix:

| Impact â†“ / Likelihood â†’ | 1 (Rare) | 2 (Unlikely) | 3 (Possible) | 4 (Likely) | 5 (Almost Certain) |
|------------------------|----------|--------------|--------------|------------|--------------------|
| 5 (Catastrophic)       |    5     |     10       |     15       |    20      |        25          |
| 4 (Major)              |    4     |     8        |     12       |    16      |        20          |
| 3 (Moderate)           |    3     |     6        |     9        |    12      |        15          |
| 2 (Minor)              |    2     |     4        |     6        |     8      |        10          |
| 1 (Insignificant)      |    1     |     2        |     3        |     4      |         5          |

[Insert your actual risk matrix visualization here.]

**UNFINISHED: RISK MATRIX VISUALIZATION YET TO COMPLETE. WAHAB HELP ME OUT WITH THIS PLS**

Section 11: Functional Requirements (Expanded)
See Section 4.1 for the full list. For each requirement, detailed use cases and user stories were developed and tracked in the project management tool. Example:
- As a user, I can register and log in securely, so that my account and stats are protected.
- As a player, I can join a real-time Pong match with other users, so that I can compete online.
- As a user, I can play Tic-Tac-Toe with basic matchmaking, so that I can enjoy a second game mode.

Section 12: Technical Requirements (Expanded)
See Section 4.2 for the full list. Each technical requirement was mapped to specific implementation tasks and validated through testing and code review. Example:
- JWT authentication is implemented using @fastify/jwt and validated in all protected routes.
- WebSocket communication is handled by the game-service and integrated with the frontend for real-time updates.
- Docker Compose orchestrates the deployment of backend, frontend, and game services.

Section 13: Wireframes
Wireframes were created for all major screens, including:
- Landing Page
- Login/Register
- Home/Dashboard
- Game Screen (Pong, Tic-Tac-Toe)
- Profile
- Settings

[Insert annotated wireframes or screenshots here. Use Figma, Balsamiq, or another tool. Include descriptions of layout, navigation, and key UI elements.]

**WAHAB HELP ME OUT WITH THIS PLS: ANNOTATED WIREFRAMES/SCREENSHOTS YET TO COMPLETE**

Section 14: Flowcharts
Flowcharts were developed to illustrate primary user interactions and system processes, such as:
- User Registration and Login Flow
- Pong Multiplayer Game Flow
- Tic-Tac-Toe Matchmaking Flow
- Game Customization Flow
- Stats Dashboard Update Flow

[Insert flowcharts here. Use Lucidchart, draw.io, or another tool. Annotate each flowchart with step-by-step explanations.]

**UNFINISHED: FLOWCHARTS YET TO COMPLETE. WAHAB HELP ME OUT WITH THIS PLS**

Section 15: Conclusion
The ft_transcendence project exemplifies the successful application of modern software engineering practices in a full-stack, real-time multiplayer game. Through careful planning, agile development, and continuous testing, the team delivered a robust, scalable, and engaging platform. Key achievements include secure authentication, real-time gameplay, responsive UI, and seamless integration of backend and frontend services. The collaborative effort of all team members ensured high code quality, rapid iteration, and effective problem-solving. Looking forward, the project provides a strong foundation for future enhancements, such as mobile support, new game modes, and advanced analytics.

Section 16: Appendices
A. Project Timeline (Gantt chart)
B. Risk Register and Matrix
C. Database Schema (ERD)
D. API Documentation
E. Additional diagrams, code snippets, or supporting materials

[Attach all supporting documents, diagrams, and code samples here.]

**UNFINISHED: APPENDICES/SUPPORTING DOCUMENTS YET TO COMPLETE. WAHAB HELP ME OUT WITH THIS PLS**
